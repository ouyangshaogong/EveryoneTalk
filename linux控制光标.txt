#include <stdio.h>
//清屏
#define CLEAR() printf("\033[2J")
 
// 上移光标
#define MOVEUP(x) printf("\033[%dA", (x))
 
// 下移光标
#define MOVEDOWN(x) printf("\033[%dB", (x))
 
// 左移光标
#define MOVELEFT(y) printf("\033[%dD", (y))
 
// 右移光标
#define MOVERIGHT(y) printf("\033[%dC",(y))
 
// 定位光标
#define MOVETO(x,y) printf("\033[%d;%dH", (x), (y))
 
// 光标复位
#define RESET_CURSOR() printf("\033[H")
// 隐藏光标
#define HIDE_CURSOR() printf("\033[?25l")
 
// 显示光标
#define SHOW_CURSOR() printf("\033[?25h")
 
//清除从光标到行尾的内容
#define CLEAR_LINE() printf("\033[K")
//反显
#define HIGHT_LIGHT() printf("\033[7m")
#define UN_HIGHT_LIGHT() printf("\033[27m")
 
//设置颜色
#define SET_FRONT_COLOR(color) printf("\033[%dm",(color))
#define SET_BACKGROUND_COLOR(color) printf("\033[%dm",(color))
//前景色
#define FRONT_BLACK 30
#define FRONT_RED 31
#define FRONT_GREEN 32
#define FRONT_YELLOW 33
#define FRONT_BLUE 34
#define FRONT_PURPLE 35
#define FRONT_DEEP_GREEN 36
#define FRONT_WHITE 37
 
//背景色
#define BACKGROUND_BLACK 40
#define BACKGROUND_RED 41
#define BACKGROUND_GREEN 42
#define BACKGROUND_YELLOW 43
#define BACKGROUND_BLUE 44
#define BACKGROUND_PURPLE 45
#define BACKGROUND_DEEP_GREEN 46
#define BACKGROUND_WHITE 47






#include <stdio.h>
//带有宏定义函数的头文件
#include <ctrlcur.h>
 
int main(int argc,char **argv)
{
        //利用宏定义函数
        SET_BACKGROUND_COLOR(BACKGROUND_RED);
        printf("前白后红");
        sleep(3);
        SET_FRONT_COLOR(FRONT_BLUE);
        printf("前蓝后红");
        sleep(3);
        SET_BACKGROUND_COLOR(BACKGROUND_BLACK);
        SET_FRONT_COLOR(FRONT_WHITE);
        printf("开始测试光标移动:");
        sleep(3);
        MOVEDOWN(5);
        printf("下移5格后打印的结果");
        sleep(3);
        MOVEUP(3);
        printf("再上移3格后打印的结果");
        sleep(3);
        MOVETO(12,12);
        printf("移动到12,12后打印的结果");
        sleep(3);
        
        //直接使用控制语句
        printf("\033[31mThe color,%s!\033[1m\n"," 1");
        printf("\033[31mThe color,%s!\033[4m\n"," 2");
        printf("\033[31mThe color,%s!\033[5m\n"," 3");
        printf("\033[31mThe color,%s!\033[7m\n"," 4");
        printf("\033[31mThe color,%s!\033[8m\n"," 5");
        printf("\033[31mThe color,%s!\033[0m\n"," 6");
        printf("\033[47;31mThe color,%s!\033[0m\n"," 7");
        printf("\033[47mThe color,%s!\033[0m\n"," 8");
        sleep(2);
        printf("\033[45m%s!\033[5A\n","up 5");
        sleep(2);
        printf("\033[44m%s!\033[9B\n","down 9");
        sleep(2);
        printf("\033[43m%s!\033[19C\n","right 19");
        printf("right19");
        sleep(2);
        printf("\033[46m%s!\033[10D\n","left 10");
        printf("left 10");
        sleep(2);
        printf("\033[44m%s!\033[50;20H\n","move to y:50,x 20");
        printf("y50 x 20");
        sleep(2);
        printf("\033[44m%s!\033[?25l\n","hide cursor");
        sleep(2);
        printf("\033[40m%s!\033[?25h\n","sow cursor");
        sleep(2);
        //printf("\033[47m%s!\033[2J\n","clear scleen");
        sleep(2);
        return 0;
}



while (is_try_choose) {
        printf("\033[K"); //清除从光标到行尾的内容
        printf("please choose:");
        scanf("%d", &use_type);

        if (use_type != 1 && use_type != 2) {
            printf("Input Error. please try again.\n");
            setbuf(stdin,NULL); //清空输入缓冲区
            getchar();
            is_try_choose = true;

            printf("\033[1A");  //上移13位
            printf("\033[K"); //清除从光标到行尾的内容
            printf("\033[13A");  //上移13位
            print_main();     //重新打印主界面
            
        }
        else {
            is_try_choose = false;
        }
        
    }
    
    
printf("\033[7A");  //上移8位
    printf("\033[15C"); //右移10位

    char name[100];
    scanf("%s", name);
    printf("\033[6B");    //下移7位
    printf("hello, world\n");

    for(int i = 0; i < 13; i++) {
        printf("\033[1A"); //上移1行
        printf("\033[K"); //清除从光标到行尾的内容
    }
















#include <stdio.h>
#include <string.h>
#include <stdlib.h>

//分配内存的大小
#define     SIZE    10
//定义按键们的宏
#define     ESC     "\033"
#define     UP      "\033[A"
#define     DOWN    "\033[B"
#define     LEFT    "\033[D"
#define     RIGHT   "\033[C"

int main()
{
    char *get = (char*)malloc(SIZE);

    for ( ; ; ) 
    {   
        fgets(get, SIZE, stdin);
        /*    用fgets()函数从stdin中读取字符串时，会自动在字符串末尾追加"\n"，这里将末尾字符改为"\0"    */
        get[strlen(get) - 1] = '\0';

        if (!strcmp(get, ESC))
            printf("This is \"ESC\" button!\n");
        if (!strcmp(get, UP))
            printf("This is \"UP\" button!\n");
        if (!strcmp(get, DOWN))
            printf("This is \"DOWN\" button!\n");
        if (!strcmp(get, LEFT))
            printf("This is \"LEFT\" button!\n");
        if (!strcmp(get, RIGHT))
            printf("This is \"RIGHT\" button!\n");
    }   

    return 0;
}



#include <stdio.h>
#include <termios.h>
 
static struct termios initial_settings, new_settings;
static int peek_character = -1;
void init_keyboard(void);
void close_keyboard(void);
int kbhit(void);
int readch(void); 
void init_keyboard()
{
    tcgetattr(0,&initial_settings);
    new_settings = initial_settings;
    new_settings.c_lflag |= ICANON;
    new_settings.c_lflag |= ECHO;
    new_settings.c_lflag |= ISIG;
    new_settings.c_cc[VMIN] = 1;
    new_settings.c_cc[VTIME] = 0;
    tcsetattr(0, TCSANOW, &new_settings);
}
 
void close_keyboard()
{
    tcsetattr(0, TCSANOW, &initial_settings);
}
 
int kbhit()
{
    unsigned char ch;
    int nread;
 
    if (peek_character != -1) return 1;
    new_settings.c_cc[VMIN]=0;
    tcsetattr(0, TCSANOW, &new_settings);
    nread = read(0,&ch,1);
    new_settings.c_cc[VMIN]=1;
    tcsetattr(0, TCSANOW, &new_settings);
    if(nread == 1) 
    {
        peek_character = ch;
        return 1;
    }
    return 0;
}
 
int readch()
{
    char ch;
 
    if(peek_character != -1) 
    {
        ch = peek_character;
        peek_character = -1;
        return ch;
    }
    read(0,&ch,1);
    return ch;
}
 
int main()
{
    init_keyboard();
    while(1)
    {
        kbhit();
        printf("\n%d\n", readch());
    }
    close_keyboard();
    return 0;
}



for(int i = 0; i < f_lists.size(); i++)
{
    printf("|   ");
    printf("%d", f_lists[i].id);
    printf("    |   ");
    printf("%-11s", f_lists[i].user_name.c_str());
    printf("|   ");
    printf("%-6s", f_lists[i].state.c_str());
    printf("|\n");
}


#include <stdio.h>
#include <termios.h>
#include <unistd.h>
#include <errno.h>
#define ECHOFLAGS (ECHO | ECHOE | ECHOK | ECHONL)
//函数set_disp_mode用于控制是否开启输入回显功能
//如果option为0，则关闭回显，为1则打开回显
int set_disp_mode(int fd,int option)
{
   int err;
   struct termios term;
   if(tcgetattr(fd,&term)==-1){
     perror("Cannot get the attribution of the terminal");
     return 1;
   }
   if(option)
        term.c_lflag|=ECHOFLAGS;
   else
        term.c_lflag &=~ECHOFLAGS;
   err=tcsetattr(fd,TCSAFLUSH,&term);
   if(err==-1 && err==EINTR){
        perror("Cannot set the attribution of the terminal");
        return 1;
   }
   return 0;
}
//函数getpasswd用于获得用户输入的密码，并将其存储在指定的字符数组中
int getpasswd(char* passwd, int size)
{
   int c;
   int n = 0;
  
   printf("Please Input password:");
  
   do{
      c=getchar();
      if (c != '\n'|c!='\r'){
         passwd[n++] = c;
      }
   }while(c != '\n' && c !='\r' && n < (size - 1));
   passwd[n] = '\0';
   return n;
}
int main()
{
   char *p,passwd[20],name[20];
   printf("Please Input name:");
   scanf("%s",name);
   getchar();//将回车符屏蔽掉
   //首先关闭输出回显，这样输入密码时就不会显示输入的字符信息
   set_disp_mode(STDIN_FILENO,0);
   //调用getpasswd函数获得用户输入的密码
   getpasswd(passwd, sizeof(passwd));  
   p=passwd;
   while(*p!='\n')
     p++;
   *p='\0';
   printf("\nYour name is: %s",name);
   printf("\nYour passwd is: %s\n", passwd);
   printf("Press any key continue ...\n");
   set_disp_mode(STDIN_FILENO,1);
   getchar();
   return 0;
}














#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <termios.h>
#include <unistd.h>
#include <errno.h>

#define ECHOFLAGS (ECHO | ECHOE | ECHOK | ECHONL)

//分配内存的大小
#define     SIZE    10
//定义按键们的宏
#define     ESC     "\033"
#define     UP      "\033[A"
#define     DOWN    "\033[B"
#define     LEFT    "\033[D"
#define     RIGHT   "\033[C"

int set_disp_mode(int fd,int option)
{
   int err;
   struct termios term;
   if(tcgetattr(fd,&term)==-1){
     perror("Cannot get the attribution of the terminal");
     return 1;
   }
   if(option)
        term.c_lflag|=ECHOFLAGS;
   else
        term.c_lflag &=~ECHOFLAGS;
   err=tcsetattr(fd,TCSAFLUSH,&term);
   if(err==-1 && err==EINTR){
        perror("Cannot set the attribution of the terminal");
        return 1;
   }
   return 0;
}

int main()
{
    char *get = (char*)malloc(SIZE);

    set_disp_mode(STDIN_FILENO,0);
    for ( ; ; )
    {
         fgets(get, SIZE, stdin);
        /*    用fgets()函数从stdin中读取字符串时，会自动在字符串末尾追加"\n"，这里将末尾字符改为"\0"    */
         get[strlen(get) - 1] = '\0';

         if (!strcmp(get, ESC))
            printf("This is \"ESC\" button!\n");
         if (!strcmp(get, UP))
            printf("This is \"UP\" button!\n");
         if (!strcmp(get, DOWN))
            printf("This is \"DOWN\" button!\n");
         if (!strcmp(get, LEFT))
            printf("This is \"LEFT\" button!\n");
         if (!strcmp(get, RIGHT))
            printf("This is \"RIGHT\" button!\n");
    }
    set_disp_mode(STDIN_FILENO,1);
}



#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <termios.h>
#include <fcntl.h>
#include <string.h>

int main(void)
{
    char buf[100] = {""};
    char temp[100] = "ls -a -l -n -l"; //简单的历史命令

    struct termios old_opt, opt;
    char ch;
    int i = 0;
    int j = 0;
      
    //printf("this is test!\n");

    tcgetattr(0, &old_opt);
    opt = old_opt;
    
    opt.c_lflag &= ~ECHO;
    opt.c_lflag &= ~ICANON;
    
    tcsetattr(0, TCSANOW, &opt); //设置

    
    printf("[mysh@ localhost shell]>> ");
    while(1)
    {
        ch = getchar();
        if( ch == 27 )
        {
     // printf("test!\n");

            getchar();
            if( (ch = getchar()) == 65 || ch == 66 )
            {
                if(ch == 65) //上键

                {
                    i = strlen(buf);
                    memset(buf, 0, 100);
                    strcpy(buf, temp);
                    printf("\r[mysh@ localhost shell]>> ");
                    for(j = 0; j < i; j++)
                    {
                        printf(" ");//覆盖掉自己

                    }
                    printf("\r[mysh@ localhost shell]>> %s",buf);
                    fflush(stdout);
                }
                else if(ch == 66) //下键

                {
                    i = strlen(buf);
                    strcpy(buf, temp);
                    printf("\r[mysh@ localhost shell]>> ");
                    for(j = 0; j < i; j++)
                    {
                        printf(" ");//覆盖掉自己

                    }
                    printf("\r[mysh@ localhost shell]>> %s", buf);
                    fflush(stdout);
                }
            }
        }
        else if(ch == 127) //删除键的设置

        {
            i = strlen(buf);
            if(i != 0)
            {
                buf[i - 1] = '\0';
                i--;
                printf("\r[mysh@ localhost shell]>> ");
                for(j = 0;( j < i+1); j++)
                {
                    printf(" ");//覆盖掉自己

                }
                fflush(stdout);
                printf("\r[mysh@ localhost shell]>> %s", buf);
                fflush(stdout);
            }
        }
        else if(ch == 10) //enter键获取命令

        {
            break;
        }
        else
        {
            i = strlen(buf);
            printf("%c", ch);
            buf[i] = ch; //命令储存

            i++;
        }
    }
    tcsetattr(0, TCSANOW, &old_opt); //恢复


    printf("\n");
    return 0;
}



while(1)
{
    ch = getchar();
    if( ch == 27 )
    {
        getchar();
        if( (ch = getchar()) == 65 || ch == 66 )
        {
            if(ch == 65) //上键
            {
                strcpy(c_cmd, "UP");
            }
            else if(ch == 66) //下键
            {
                strcpy(c_cmd, "DOWN");
            }
        }
    }
    else if (ch == 58)
    {
        if( (ch = getchar()) == 104 || ch = getchar()) == 101 
            || ch = getchar()) == 108 || ch = getchar()) == 112)
        {
            strcpy(c_cmd, "HELP");
        }
    }

}












void get_cmd(char *c_cmd)
{
    struct termios old_opt, opt;
    
    tcgetattr(0, &old_opt);
    opt = old_opt;

    opt.c_lflag &= ~ECHO;
    opt.c_lflag &= ~ICANON;

    tcsetattr(0, TCSANOW, &opt); //设置
    syslog(LOG_ERR, "set attr.");
    while(1)
    {
        char ch = getchar();
        if( ch == 27 )
        {
            getchar();
            if( (ch = getchar()) == 65 || ch == 66 )
            {
                if(ch == 65) //上键
                {
                    strcpy(c_cmd, "UP");
                }
                else if(ch == 66) //下键
                {
                    strcpy(c_cmd, "DOWN");
                }

                tcsetattr(0, TCSANOW, &old_opt); //恢复
                break;
            }
        }
        else if (ch == 58)
        {
            tcsetattr(0, TCSANOW, &old_opt); //恢复
            printf(":");
            
            char t_cmd[10];
            int i = 0;
            while ((ch = getchar()) != '\n')
            {
                t_cmd[i] = ch;
                i++;
            }

            t_cmd[i] = '\0';
            strcpy(c_cmd, t_cmd);
            
            break;
        }
        else 
        {
             tcsetattr(0, TCSANOW, &old_opt); //恢复
        }

    }
    
    
}


void fill_talk_data()
{
    printf("\033[11A");

    for (int i = 0; i < TALK_SPACE_SIZE; i++)
    {
        printf("\033[1C");
        int j = 0;
        for (; j < 36; j++)
        {
            printf(" ");
        }
        printf("\033[36D");
        
        int length = MIN(print_talk_lists[i].length(), 36);
        syslog(LOG_ERR, "print_talk_lists[%d]:%s", i, print_talk_lists[i].c_str());
        for (j = 0; j < length; j++)
        {
            printf("%c", print_talk_lists[i][j]);
        }
        
        printf("\n");
    }
    
    printf("\n");
}

void fill_talk_data()
{
    printf("\033[2A");
    printf("\033[1C");
    for (int i = TALK_SPACE_SIZE - 1; i >= 0; i--)
    {
        
        int j = 0;
        for (; j < 36; j++)
        {
            printf(" ");
        }
        printf("\033[36D");
        
        int length = MIN(print_talk_lists[i].length(), 36);
        syslog(LOG_ERR, "print_talk_lists[%d]:%s", i, print_talk_lists[i].c_str());
        for (j = 0; j < length; j++)
        {
            printf("%c", print_talk_lists[i][j]);
        }
        
        printf("\033[1A");
        printf("\033[%dD", length);
    }

    for(int i = 0; i < TALK_SPACE_SIZE + 2; i++)
    {
        printf("\n");
    }
    
}


string login_time;
    for (int j = 0; j < g_vecTableLogin.size(); j++)
    {
        if (user_name == g_vecTableLogin[j].user_name)
        {
            g_vecTableLogin[j].state = state;
            login_time = g_vecTableLogin[j].login_time;
            break;
        }
    }